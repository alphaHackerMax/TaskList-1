package com.company;

import java.text.SimpleDateFormat;
import java.util.*;

public final class MyCat {
    final private String catName;
    final private String catBirthDate;
    final private String catColor;
     private List<Object> arrKitty;  // inner collection for store across "deep clone"

    SimpleDateFormat formatForBirthDate = new SimpleDateFormat("dd-MM-yyyy");

    public MyCat(String CatName, String CatColor) {
        this.catName = CatName;
        this.catColor = CatColor;

        final Date catBirthNow = new Date();
        this.catBirthDate = formatForBirthDate.format(catBirthNow);
    }

    public MyCat(String CatName, String CatColor, List<Object> ArrKitty) {
        this.catName = CatName;
        this.catColor = CatColor;

        /**
         * block performing "deep clone" for collection using temporary/intermediate collection
         * one realisation - using foreach cycle
         */
        List<Object> tempListKitty = new ArrayList<>();  // for temporary/intermediate collection
        for (Object obj : ArrKitty) {
            tempListKitty.add(obj);
        }
        this.arrKitty = tempListKitty;

        final Date catBirthNow = new Date();
        this.catBirthDate = formatForBirthDate.format(catBirthNow);
    }

    public MyCat (String CatName, String CatColor, String date) {
        this.catName = CatName;
        this.catColor = CatColor;
        this.catBirthDate = date;
    }

    public MyCat (String CatName, String CatColor, List<Object> ArrKitty, String date) {
        this.catName = CatName;
        this.catColor = CatColor;
        this.catBirthDate = date;

        /**
         * block performing "deep clone" for collection using temporary/intermediate collection
         * another realisation - across Iterator
         */
        List<Object> tempListKitty = new ArrayList<>();  // for temporary/intermediate collection
        Iterator iterator = ArrKitty.iterator();
        while (iterator.hasNext()) {
            tempListKitty.add(iterator.next());
        }
        this.arrKitty = tempListKitty;
    }

    /**
     * It's generated by IntelliJ IDEA
     * using method java.util.Object.hash from Java SDK 7
     *
     * @return integer value
     */
    @Override
    public int hashCode() {
        return Objects.hash(catName, catBirthDate, catColor, arrKitty);
    }

    /**
     * It's generated by IntelliJ IDEA
     * using method java.util.Object.equals from Java SDK 7
     * I replace equals() for deepEquals()
     *
     * @param o object for compare
     * @return boolean
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        MyCat myCat = (MyCat) o;
        return Objects.equals(getCatName(), myCat.getCatName()) &&
                Objects.equals(getCatBirthDate(), myCat.getCatBirthDate()) &&
                Objects.equals(getCatColor(), myCat.getCatColor()) &&
                Objects.deepEquals(arrKitty, myCat.arrKitty);
    }

    /**
     * It's my realisation of method equals()
     * @return boolean as result of compare for three class field
     */
    /*
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final MyCat other = (MyCat) obj;
        if (catName != other.getCatName() || (catName == null && catName.equals(other.getCatName()))) return false;
        if (catColor != other.getCatColor() || (catColor == null && catColor.equals(other.getCatColor()))) return false;
        if (catBirthDate != other.getCatBirthDate() || (catBirthDate == null && catBirthDate.equals(getCatBirthDate()))) return false;
    }
     */

    public String getCatName() {
        return catName;
    }

    public String getCatBirthDate() {
        return catBirthDate;
    }

    public String getCatColor() {
        return catColor;
    }

    public List getListKitty() {
        List<Object> unmodifiableArrKitty = Collections.unmodifiableList(arrKitty);  // collection wrapper for unmodifiable storing into the wrapped collection
        return unmodifiableArrKitty;
    }
}

